
==================== Tidy Core ====================
2016-05-16 13:47:58.318986 UTC

Result size of Tidy Core = {terms: 255, types: 481, coercions: 79}

Company.Executables.Options.Internal.Operations.$wa [InlPrag=[0]]
  :: forall a_a1wo.
     Monoid a_a1wo =>
     O.Parser a_a1wo
     -> Bool
     -> Options.Applicative.Help.Chunk.Chunk
          ansi-wl-pprint-0.6.7.3:Text.PrettyPrint.ANSI.Leijen.Doc
     -> Options.Applicative.Help.Chunk.Chunk
          ansi-wl-pprint-0.6.7.3:Text.PrettyPrint.ANSI.Leijen.Doc
     -> Options.Applicative.Help.Chunk.Chunk
          ansi-wl-pprint-0.6.7.3:Text.PrettyPrint.ANSI.Leijen.Doc
     -> Int
     -> Bool
     -> EnvParser a_a1wo
     -> a_a1wo
     -> ghc-prim-0.4.0.0:GHC.Prim.State#
          ghc-prim-0.4.0.0:GHC.Prim.RealWorld
     -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
             ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
           a_a1wo #)
[GblId,
 Arity=11,
 Str=DmdType <L,U(A,C(C1(U)),A)><L,U><L,U><L,U><L,U><L,U><L,U(U)><L,U><C(S),C1(U(U,U))><S,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [60 0 0 0 0 0 0 0 0 0 0] 190 30}]
Company.Executables.Options.Internal.Operations.$wa =
  \ (@ a_a1wo)
    (w_s5Bw :: Monoid a_a1wo)
    (ww_s5BE :: O.Parser a_a1wo)
    (ww1_s5BF :: Bool)
    (ww2_s5BG
       :: Options.Applicative.Help.Chunk.Chunk
            ansi-wl-pprint-0.6.7.3:Text.PrettyPrint.ANSI.Leijen.Doc)
    (ww3_s5BH
       :: Options.Applicative.Help.Chunk.Chunk
            ansi-wl-pprint-0.6.7.3:Text.PrettyPrint.ANSI.Leijen.Doc)
    (ww4_s5BI
       :: Options.Applicative.Help.Chunk.Chunk
            ansi-wl-pprint-0.6.7.3:Text.PrettyPrint.ANSI.Leijen.Doc)
    (ww5_s5BJ :: Int)
    (ww6_s5BK :: Bool)
    (ww7_s5BM :: EnvParser a_a1wo)
    (ww8_s5BN :: a_a1wo)
    (w1_s5By [OS=OneShot]
       :: ghc-prim-0.4.0.0:GHC.Prim.State#
            ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
    case (ww7_s5BM
          `cast` (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <a_a1wo>_R
                  :: IO a_a1wo
                     ~R# (ghc-prim-0.4.0.0:GHC.Prim.State#
                            ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                  ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                a_a1wo #))))
           w1_s5By
    of _ [Occ=Dead] { (# ipv_i35C, ipv1_i35D #) ->
    case System.Environment.getArgs1 ipv_i35C
    of _ [Occ=Dead] { (# ipv2_a35P, ipv3_a35Q #) ->
    case Options.Applicative.Extra.customExecParser2
           @ a_a1wo
           (O.execParserPure
              @ a_a1wo
              parserPrefs
              (Options.Applicative.Types.ParserInfo
                 @ a_a1wo
                 ww_s5BE
                 ww1_s5BF
                 ww2_s5BG
                 ww3_s5BH
                 ww4_s5BI
                 ww5_s5BJ
                 ww6_s5BK)
              ipv3_a35Q)
           ipv2_a35P
    of _ [Occ=Dead] { (# ipv4_X36r, ipv5_X36t #) ->
    (# ipv4_X36r,
       mappend
         @ a_a1wo
         w_s5Bw
         ww8_s5BN
         (mappend @ a_a1wo w_s5Bw ipv1_i35D ipv5_X36t) #)
    }
    }
    }

Company.Executables.Options.Internal.Operations.execParser1 [InlPrag=INLINE[0]]
  :: forall a_a1wo.
     Monoid a_a1wo =>
     ParserInfo a_a1wo
     -> ghc-prim-0.4.0.0:GHC.Prim.State#
          ghc-prim-0.4.0.0:GHC.Prim.RealWorld
     -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
             ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
           a_a1wo #)
[GblId,
 Arity=3,
 Str=DmdType <L,U(A,C(C1(U)),A)><S(SC(S)S),1*U(U(U,U,U,U,U,U(U),U),C1(U(U,U)),U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a1wo)
                 (w_s5Bw [Occ=Once] :: Monoid a_a1wo)
                 (w1_s5Bx [Occ=Once!] :: ParserInfo a_a1wo)
                 (w2_s5By [Occ=Once, OS=OneShot]
                    :: ghc-prim-0.4.0.0:GHC.Prim.State#
                         ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
                 case w1_s5Bx
                 of _ [Occ=Dead]
                 { ParserInfo ww1_s5BB [Occ=Once!] ww2_s5BM [Occ=Once]
                              ww3_s5BN [Occ=Once] ->
                 case ww1_s5BB
                 of _ [Occ=Dead]
                 { O.ParserInfo ww5_s5BE [Occ=Once] ww6_s5BF [Occ=Once]
                                ww7_s5BG [Occ=Once] ww8_s5BH [Occ=Once] ww9_s5BI [Occ=Once]
                                ww10_s5BJ [Occ=Once] ww11_s5BK [Occ=Once] ->
                 Company.Executables.Options.Internal.Operations.$wa
                   @ a_a1wo
                   w_s5Bw
                   ww5_s5BE
                   ww6_s5BF
                   ww7_s5BG
                   ww8_s5BH
                   ww9_s5BI
                   ww10_s5BJ
                   ww11_s5BK
                   ww2_s5BM
                   ww3_s5BN
                   w2_s5By
                 }
                 }}]
Company.Executables.Options.Internal.Operations.execParser1 =
  \ (@ a_a1wo)
    (w_s5Bw :: Monoid a_a1wo)
    (w1_s5Bx :: ParserInfo a_a1wo)
    (w2_s5By [OS=OneShot]
       :: ghc-prim-0.4.0.0:GHC.Prim.State#
            ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
    case w1_s5Bx
    of _ [Occ=Dead] { ParserInfo ww1_s5BB ww2_s5BM ww3_s5BN ->
    case ww1_s5BB
    of _ [Occ=Dead]
    { O.ParserInfo ww5_s5DU ww6_s5DV ww7_s5DW ww8_s5DX ww9_s5DY
                   ww10_s5DZ ww11_s5E0 ->
    Company.Executables.Options.Internal.Operations.$wa
      @ a_a1wo
      w_s5Bw
      ww5_s5DU
      ww6_s5DV
      ww7_s5DW
      ww8_s5DX
      ww9_s5DY
      ww10_s5DZ
      ww11_s5E0
      ww2_s5BM
      ww3_s5BN
      w2_s5By
    }
    }

execParser
  :: forall a_a1pC. Monoid a_a1pC => ParserInfo a_a1pC -> IO a_a1pC
[GblId,
 Arity=3,
 Str=DmdType <L,U(A,C(C1(U)),A)><S(SC(S)S),1*U(U(U,U,U,U,U,U(U),U),C1(U(U,U)),U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Company.Executables.Options.Internal.Operations.execParser1
               `cast` (forall a_a1wo.
                       <Monoid a_a1wo>_R
                       -> <ParserInfo a_a1wo>_R
                       -> Sym (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <a_a1wo>_R)
                       :: (forall a_a1wo.
                           Monoid a_a1wo =>
                           ParserInfo a_a1wo
                           -> ghc-prim-0.4.0.0:GHC.Prim.State#
                                ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                   ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                 a_a1wo #))
                          ~R# (forall a_a1wo.
                               Monoid a_a1wo =>
                               ParserInfo a_a1wo -> IO a_a1wo))}]
execParser =
  Company.Executables.Options.Internal.Operations.execParser1
  `cast` (forall a_a1wo.
          <Monoid a_a1wo>_R
          -> <ParserInfo a_a1wo>_R
          -> Sym (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <a_a1wo>_R)
          :: (forall a_a1wo.
              Monoid a_a1wo =>
              ParserInfo a_a1wo
              -> ghc-prim-0.4.0.0:GHC.Prim.State#
                   ghc-prim-0.4.0.0:GHC.Prim.RealWorld
              -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                      ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                    a_a1wo #))
             ~R# (forall a_a1wo.
                  Monoid a_a1wo =>
                  ParserInfo a_a1wo -> IO a_a1wo))

flag
  :: forall a_a1pw.
     a_a1pw -> a_a1pw -> ArgsMod FlagFields a_a1pw -> ArgsParser a_a1pw
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=DmdType <L,U><L,U><L,1*U(1*C1(U(U,1*U)),1*U(U,1*U),1*C1(U(U,U,U,A)))>m4,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= O.flag}]
flag = O.flag

fullDesc :: forall a_a1py. ArgsInfoMod a_a1py
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=DmdType <S,1*U(U,A,U,U,U,U,U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Options.Applicative.Builder.fullDesc1
               `cast` (forall a2_i2FO.
                       Sym (Options.Applicative.Builder.NTCo:InfoMod[0] <a2_i2FO>_N)
                       :: (forall a2_i2FO. O.ParserInfo a2_i2FO -> O.ParserInfo a2_i2FO)
                          ~R# (forall a2_i2FO. O.InfoMod a2_i2FO))}]
fullDesc =
  Options.Applicative.Builder.fullDesc1
  `cast` (forall a2_i2FO.
          Sym (Options.Applicative.Builder.NTCo:InfoMod[0] <a2_i2FO>_N)
          :: (forall a2_i2FO. O.ParserInfo a2_i2FO -> O.ParserInfo a2_i2FO)
             ~R# (forall a2_i2FO. O.InfoMod a2_i2FO))

help
  :: forall (f_a1pu :: * -> *) a_a1pv.
     String -> ArgsMod f_a1pu a_a1pv
[GblId,
 Arity=1,
 Str=DmdType <L,1*U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= O.help}]
help = O.help

Company.Executables.Options.Internal.Operations.helper1
  :: forall a_a1vR.
     ghc-prim-0.4.0.0:GHC.Prim.State#
       ghc-prim-0.4.0.0:GHC.Prim.RealWorld
     -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
             ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
           a_a1vR -> a_a1vR #)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)}]
Company.Executables.Options.Internal.Operations.helper1 =
  \ (@ a_a1vR)
    (s_i59b [OS=OneShot]
       :: ghc-prim-0.4.0.0:GHC.Prim.State#
            ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
    (# s_i59b, id @ a_a1vR #)

helper :: forall a_a1pz. Parser (a_a1pz -> a_a1pz)
[GblId,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 40}]
helper =
  \ (@ a_a1vR) ->
    case O.helper @ a_a1vR of dt_X1Ds { __DEFAULT ->
    Company.Executables.Options.Internal.Types.Parser
      @ (a_a1vR -> a_a1vR)
      dt_X1Ds
      ((Company.Executables.Options.Internal.Operations.helper1 @ a_a1vR)
       `cast` (Sym
                 (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <a_a1vR -> a_a1vR>_R)
               :: (ghc-prim-0.4.0.0:GHC.Prim.State#
                     ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                           ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                         a_a1vR -> a_a1vR #))
                  ~R# IO (a_a1vR -> a_a1vR)))
      (id @ a_a1vR)
    }

long
  :: forall (f_a1ps :: * -> *) a_a1pt.
     HasArgName f_a1ps =>
     String -> ArgsMod f_a1ps a_a1pt
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=DmdType <L,1*C1(U)><L,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= O.long}]
long = O.long

lookupEnv :: String -> EnvParser (Maybe String)
[GblId,
 Arity=2,
 Str=DmdType <L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= System.Environment.lookupEnv1
               `cast` (<String>_R
                       -> Sym (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <Maybe String>_R)
                       :: (String
                           -> ghc-prim-0.4.0.0:GHC.Prim.State#
                                ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                   ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                 Maybe String #))
                          ~R# (String -> IO (Maybe String)))}]
lookupEnv =
  System.Environment.lookupEnv1
  `cast` (<String>_R
          -> Sym (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <Maybe String>_R)
          :: (String
              -> ghc-prim-0.4.0.0:GHC.Prim.State#
                   ghc-prim-0.4.0.0:GHC.Prim.RealWorld
              -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                      ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                    Maybe String #))
             ~R# (String -> IO (Maybe String)))

metavar
  :: forall (f_a1po :: * -> *) a_a1pp.
     HasArgMetavar f_a1po =>
     String -> ArgsMod f_a1po a_a1pp
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=DmdType <L,A><L,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= O.metavar}]
metavar = O.metavar

Company.Executables.Options.Internal.Operations.fromParser2
  :: forall a_a1w3 b_a1w4.
     ParserInfo a_a1w3
     -> ghc-prim-0.4.0.0:GHC.Prim.State#
          ghc-prim-0.4.0.0:GHC.Prim.RealWorld
     -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
             ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
           b_a1w4 #)
[GblId,
 Arity=2,
 Str=DmdType <S(SSS),1*U(U(U,A,U,U,U,U(U),A),1*H,1*H)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a1w3)
                 (@ b_a1w4)
                 (ds_d2Fu [Occ=Once!] :: ParserInfo a_a1w3)
                 (eta_B1 [Occ=Once, OS=OneShot]
                    :: ghc-prim-0.4.0.0:GHC.Prim.State#
                         ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
                 case ds_d2Fu
                 of _ [Occ=Dead]
                 { ParserInfo ds1_d2Fv [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] ->
                 Options.Applicative.Extra.customExecParser2
                   @ b_a1w4
                   (Options.Applicative.Types.Failure
                      @ b_a1w4
                      (O.parserFailure
                         @ a_a1w3
                         parserPrefs
                         ds1_d2Fv
                         Options.Applicative.Types.ShowHelpText
                         (ghc-prim-0.4.0.0:GHC.Types.[]
                            @ Options.Applicative.Internal.Context)))
                   eta_B1
                 }}]
Company.Executables.Options.Internal.Operations.fromParser2 =
  \ (@ a_a1w3)
    (@ b_a1w4)
    (ds_d2Fu :: ParserInfo a_a1w3)
    (eta_B1 [OS=OneShot]
       :: ghc-prim-0.4.0.0:GHC.Prim.State#
            ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
    case ds_d2Fu
    of _ [Occ=Dead] { ParserInfo ds1_d2Fv ds2_d2Fw ds3_d2Fx ->
    Options.Applicative.Extra.customExecParser2
      @ b_a1w4
      (Options.Applicative.Types.Failure
         @ b_a1w4
         (O.parserFailure
            @ a_a1w3
            parserPrefs
            ds1_d2Fv
            Options.Applicative.Types.ShowHelpText
            (ghc-prim-0.4.0.0:GHC.Types.[]
               @ Options.Applicative.Internal.Context)))
      eta_B1
    }

printHelp :: forall a_a1pA b_a1pB. ParserInfo a_a1pA -> IO b_a1pB
[GblId,
 Arity=2,
 Str=DmdType <S(SSS),1*U(U(U,A,U,U,U,U(U),A),1*H,1*H)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Company.Executables.Options.Internal.Operations.fromParser2
               `cast` (forall a_a1w3 b_a1w4.
                       <ParserInfo a_a1w3>_R
                       -> Sym (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <b_a1w4>_R)
                       :: (forall a_a1w3 b_a1w4.
                           ParserInfo a_a1w3
                           -> ghc-prim-0.4.0.0:GHC.Prim.State#
                                ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                   ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                 b_a1w4 #))
                          ~R# (forall a_a1w3 b_a1w4. ParserInfo a_a1w3 -> IO b_a1w4))}]
printHelp =
  Company.Executables.Options.Internal.Operations.fromParser2
  `cast` (forall a_a1w3 b_a1w4.
          <ParserInfo a_a1w3>_R
          -> Sym (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <b_a1w4>_R)
          :: (forall a_a1w3 b_a1w4.
              ParserInfo a_a1w3
              -> ghc-prim-0.4.0.0:GHC.Prim.State#
                   ghc-prim-0.4.0.0:GHC.Prim.RealWorld
              -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                      ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                    b_a1w4 #))
             ~R# (forall a_a1w3 b_a1w4. ParserInfo a_a1w3 -> IO b_a1w4))

Company.Executables.Options.Internal.Operations.fromParser1
  :: forall a_a1wF b_a1wG.
     Monoid a_a1wF =>
     (a_a1wF -> Maybe b_a1wG)
     -> ParserInfo a_a1wF
     -> ghc-prim-0.4.0.0:GHC.Prim.State#
          ghc-prim-0.4.0.0:GHC.Prim.RealWorld
     -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
             ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
           b_a1wG #)
[GblId,
 Arity=4,
 Str=DmdType <L,U(A,C(C1(U)),A)><L,1*C1(U)><S(SC(S)S),U(U(U,U,U,U,U,U(U),U),C1(U(U,U)),U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a1wF)
                 (@ b_a1wG)
                 ($dMonoid_a21J [Occ=Once] :: Monoid a_a1wF)
                 (f_a1pF [Occ=Once!] :: a_a1wF -> Maybe b_a1wG)
                 (pinfo_a1pG :: ParserInfo a_a1wF)
                 (eta_B1 [Occ=Once, OS=OneShot]
                    :: ghc-prim-0.4.0.0:GHC.Prim.State#
                         ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
                 case Company.Executables.Options.Internal.Operations.execParser1
                        @ a_a1wF $dMonoid_a21J pinfo_a1pG eta_B1
                 of _ [Occ=Dead]
                 { (# ipv_i35C [Occ=Once*], ipv1_i35D [Occ=Once] #) ->
                 case f_a1pF ipv1_i35D of _ [Occ=Dead] {
                   Nothing ->
                     Company.Executables.Options.Internal.Operations.fromParser2
                       @ a_a1wF @ b_a1wG pinfo_a1pG ipv_i35C;
                   Just x_a2Kj [Occ=Once] -> (# ipv_i35C, x_a2Kj #)
                 }
                 }}]
Company.Executables.Options.Internal.Operations.fromParser1 =
  \ (@ a_a1wF)
    (@ b_a1wG)
    ($dMonoid_a21J :: Monoid a_a1wF)
    (f_a1pF :: a_a1wF -> Maybe b_a1wG)
    (pinfo_a1pG :: ParserInfo a_a1wF)
    (eta_B1 [OS=OneShot]
       :: ghc-prim-0.4.0.0:GHC.Prim.State#
            ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
    case pinfo_a1pG
    of _ [Occ=Dead] { ParserInfo ww1_s5BB ww2_s5BM ww3_s5BN ->
    case (ww2_s5BM
          `cast` (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <a_a1wF>_R
                  :: IO a_a1wF
                     ~R# (ghc-prim-0.4.0.0:GHC.Prim.State#
                            ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                  ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                a_a1wF #))))
           eta_B1
    of _ [Occ=Dead] { (# ipv_i35C, ipv1_i35D #) ->
    case System.Environment.getArgs1 ipv_i35C
    of _ [Occ=Dead] { (# ipv2_a35P, ipv3_a35Q #) ->
    case Options.Applicative.Extra.customExecParser2
           @ a_a1wF
           (O.execParserPure @ a_a1wF parserPrefs ww1_s5BB ipv3_a35Q)
           ipv2_a35P
    of _ [Occ=Dead] { (# ipv4_X36r, ipv5_X36t #) ->
    case f_a1pF
           (mappend
              @ a_a1wF
              $dMonoid_a21J
              ww3_s5BN
              (mappend @ a_a1wF $dMonoid_a21J ipv1_i35D ipv5_X36t))
    of _ [Occ=Dead] {
      Nothing ->
        Options.Applicative.Extra.customExecParser2
          @ b_a1wG
          (Options.Applicative.Types.Failure
             @ b_a1wG
             (O.parserFailure
                @ a_a1wF
                parserPrefs
                ww1_s5BB
                Options.Applicative.Types.ShowHelpText
                (ghc-prim-0.4.0.0:GHC.Types.[]
                   @ Options.Applicative.Internal.Context)))
          ipv4_X36r;
      Just x_a2Kj -> (# ipv4_X36r, x_a2Kj #)
    }
    }
    }
    }
    }

fromParser
  :: forall a_a1pD b_a1pE.
     Monoid a_a1pD =>
     (a_a1pD -> Maybe b_a1pE) -> ParserInfo a_a1pD -> IO b_a1pE
[GblId,
 Arity=4,
 Str=DmdType <L,U(A,C(C1(U)),A)><L,1*C1(U)><S(SC(S)S),U(U(U,U,U,U,U,U(U),U),C1(U(U,U)),U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Company.Executables.Options.Internal.Operations.fromParser1
               `cast` (forall a_a1wF b_a1wG.
                       <Monoid a_a1wF>_R
                       -> <a_a1wF -> Maybe b_a1wG>_R
                       -> <ParserInfo a_a1wF>_R
                       -> Sym (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <b_a1wG>_R)
                       :: (forall a_a1wF b_a1wG.
                           Monoid a_a1wF =>
                           (a_a1wF -> Maybe b_a1wG)
                           -> ParserInfo a_a1wF
                           -> ghc-prim-0.4.0.0:GHC.Prim.State#
                                ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                   ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                 b_a1wG #))
                          ~R# (forall a_a1wF b_a1wG.
                               Monoid a_a1wF =>
                               (a_a1wF -> Maybe b_a1wG) -> ParserInfo a_a1wF -> IO b_a1wG))}]
fromParser =
  Company.Executables.Options.Internal.Operations.fromParser1
  `cast` (forall a_a1wF b_a1wG.
          <Monoid a_a1wF>_R
          -> <a_a1wF -> Maybe b_a1wG>_R
          -> <ParserInfo a_a1wF>_R
          -> Sym (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <b_a1wG>_R)
          :: (forall a_a1wF b_a1wG.
              Monoid a_a1wF =>
              (a_a1wF -> Maybe b_a1wG)
              -> ParserInfo a_a1wF
              -> ghc-prim-0.4.0.0:GHC.Prim.State#
                   ghc-prim-0.4.0.0:GHC.Prim.RealWorld
              -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                      ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                    b_a1wG #))
             ~R# (forall a_a1wF b_a1wG.
                  Monoid a_a1wF =>
                  (a_a1wF -> Maybe b_a1wG) -> ParserInfo a_a1wF -> IO b_a1wG))

progDesc :: forall a_a1px. String -> ArgsInfoMod a_a1px
[GblId,
 Arity=1,
 Str=DmdType <L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= O.progDesc}]
progDesc = O.progDesc

readMaybe :: forall a_a1dC. Read a_a1dC => String -> Maybe a_a1dC
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=DmdType <S(C(C(S))LLL),1*U(1*C1(C1(U)),A,A,A)><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 0] 120 50}]
readMaybe =
  \ (@ a_a1sq) ($dRead_a1wH :: Read a_a1sq) (s_a1ro :: String) ->
    case readsPrec
           @ a_a1sq $dRead_a1wH Text.ParserCombinators.ReadPrec.minPrec s_a1ro
    of _ [Occ=Dead] {
      [] -> GHC.Base.Nothing @ a_a1sq;
      : ds_d2Fn ds1_d2Fo ->
        case ds_d2Fn of _ [Occ=Dead] { (x_a1rW, ds2_d2Fp) ->
        case ds2_d2Fp of _ [Occ=Dead] {
          [] ->
            case ds1_d2Fo of _ [Occ=Dead] {
              [] -> GHC.Base.Just @ a_a1sq x_a1rW;
              : ipv_s2Wq ipv1_s2Wr -> GHC.Base.Nothing @ a_a1sq
            };
          : ipv_s2Wo ipv1_s2Wt -> GHC.Base.Nothing @ a_a1sq
        }
        }
    }

Company.Executables.Options.Internal.Operations.readEnv1
  :: forall a_a1sJ.
     Read a_a1sJ =>
     String
     -> ghc-prim-0.4.0.0:GHC.Prim.State#
          ghc-prim-0.4.0.0:GHC.Prim.RealWorld
     -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
             ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
           Maybe a_a1sJ #)
[GblId,
 Arity=3,
 Str=DmdType <L,1*U(1*C1(C1(U)),A,A,A)><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 120 30}]
Company.Executables.Options.Internal.Operations.readEnv1 =
  \ (@ a_a1sJ)
    ($dRead_a1Bi :: Read a_a1sJ)
    (eta_B1 :: String)
    (s_i59T [OS=OneShot]
       :: ghc-prim-0.4.0.0:GHC.Prim.State#
            ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
    case GHC.IO.Encoding.getForeignEncoding1
    of _ [Occ=Dead]
    { (getForeignEncoding5_a59v, setForeignEncoding1_a59w) ->
    case (getForeignEncoding5_a59v
          `cast` (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0]
                    <GHC.IO.Encoding.Types.TextEncoding>_R
                  :: IO GHC.IO.Encoding.Types.TextEncoding
                     ~R# (ghc-prim-0.4.0.0:GHC.Prim.State#
                            ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                  ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                GHC.IO.Encoding.Types.TextEncoding #))))
           s_i59T
    of _ [Occ=Dead] { (# ipv_a59D, ipv1_a59E #) ->
    case GHC.Foreign.charIsRepresentable3
           @ (Maybe String)
           ipv1_a59E
           eta_B1
           (System.Environment.getEnv4
            `cast` (<Foreign.C.String.CString>_R
                    -> Sym (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <Maybe String>_R)
                    :: (Foreign.C.String.CString
                        -> ghc-prim-0.4.0.0:GHC.Prim.State#
                             ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                        -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                              Maybe String #))
                       ~R# (Foreign.C.String.CString -> IO (Maybe String))))
           ipv_a59D
    of _ [Occ=Dead] { (# ipv2_i59W, ipv3_i59X #) ->
    (# ipv2_i59W,
       case ipv3_i59X of _ [Occ=Dead] {
         Nothing -> GHC.Base.Nothing @ a_a1sJ;
         Just x_i2WQ -> readMaybe @ a_a1sJ $dRead_a1Bi x_i2WQ
       } #)
    }
    }
    }

readEnv
  :: forall a_a1pl. Read a_a1pl => String -> EnvParser (Maybe a_a1pl)
[GblId,
 Arity=3,
 Str=DmdType <L,1*U(1*C1(C1(U)),A,A,A)><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Company.Executables.Options.Internal.Operations.readEnv1
               `cast` (forall a_a1sJ.
                       <Read a_a1sJ>_R
                       -> <String>_R
                       -> Sym (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <Maybe a_a1sJ>_R)
                       :: (forall a_a1sJ.
                           Read a_a1sJ =>
                           String
                           -> ghc-prim-0.4.0.0:GHC.Prim.State#
                                ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                   ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                 Maybe a_a1sJ #))
                          ~R# (forall a_a1sJ. Read a_a1sJ => String -> IO (Maybe a_a1sJ)))}]
readEnv =
  Company.Executables.Options.Internal.Operations.readEnv1
  `cast` (forall a_a1sJ.
          <Read a_a1sJ>_R
          -> <String>_R
          -> Sym (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <Maybe a_a1sJ>_R)
          :: (forall a_a1sJ.
              Read a_a1sJ =>
              String
              -> ghc-prim-0.4.0.0:GHC.Prim.State#
                   ghc-prim-0.4.0.0:GHC.Prim.RealWorld
              -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                      ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                    Maybe a_a1sJ #))
             ~R# (forall a_a1sJ. Read a_a1sJ => String -> IO (Maybe a_a1sJ)))

short
  :: forall (f_a1pq :: * -> *) a_a1pr.
     HasArgName f_a1pq =>
     Char -> ArgsMod f_a1pq a_a1pr
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=DmdType <L,1*C1(U)><L,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= O.short}]
short = O.short

strArgument :: ArgsMod ArgFields String -> ArgsParser String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=DmdType,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= O.strArgument}]
strArgument = O.strArgument

strOption :: ArgsMod OptionFields String -> ArgsParser String
[GblId,
 Arity=1,
 Str=DmdType,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= O.strOption}]
strOption = O.strOption

value
  :: forall a_a1pm (f_a1pn :: * -> *).
     HasArgValue f_a1pn =>
     a_a1pm -> ArgsMod f_a1pn a_a1pm
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=DmdType <L,A><L,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= O.value}]
value = O.value

Company.Executables.Options.Internal.Operations.intOption1
  :: String
     -> transformers-0.4.2.0:Control.Monad.Trans.Except.Except
          O.ParseError Int
[GblId,
 Arity=1,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
Company.Executables.Options.Internal.Operations.intOption1 =
  Options.Applicative.Builder.auto1 @ Int GHC.Read.$fReadInt

intOption [InlPrag=INLINE[0]]
  :: ArgsMod OptionFields Int -> ArgsParser Int
[GblId,
 Arity=1,
 Str=DmdType <S(LSL),1*U(1*C1(U(U,U,U)),1*U(U,1*U),1*C1(U(U,U,U,A)))>m4,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s5BV [Occ=Once!] :: ArgsMod OptionFields Int) ->
                 case w_s5BV
                 of _ [Occ=Dead]
                 { Options.Applicative.Builder.Internal.Mod ww1_s5BY [Occ=Once]
                                                            ww2_s5BZ [Occ=Once!]
                                                            ww3_s5C5 [Occ=Once] ->
                 case ww2_s5BZ
                 of _ [Occ=Dead]
                 { Options.Applicative.Builder.Internal.DefaultProp ww5_s5C2 [Occ=Once]
                                                                    ww6_s5C3 [Occ=Once] ->
                 case Options.Applicative.Builder.$woption
                        @ Int
                        (Company.Executables.Options.Internal.Operations.intOption1
                         `cast` (Sym
                                   (transformers-0.4.2.0:Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                      <String>_R
                                      <transformers-0.4.2.0:Control.Monad.Trans.Except.Except
                                         O.ParseError>_R
                                      <Int>_N)
                                 ; Sym Options.Applicative.Types.NTCo:ReadM[0] <Int>_N
                                 :: (String
                                     -> transformers-0.4.2.0:Control.Monad.Trans.Except.Except
                                          O.ParseError Int)
                                    ~R# O.ReadM Int))
                        ww1_s5BY
                        ww5_s5C2
                        ww6_s5C3
                        ww3_s5C5
                 of _ [Occ=Dead] { (# ww8_s5Cb [Occ=Once], ww9_s5Cc [Occ=Once] #) ->
                 Options.Applicative.Types.AltP @ Int ww8_s5Cb ww9_s5Cc
                 }
                 }
                 }}]
intOption =
  \ (w_s5BV :: ArgsMod OptionFields Int) ->
    case w_s5BV
    of _ [Occ=Dead]
    { Options.Applicative.Builder.Internal.Mod ww1_s5BY ww2_s5BZ
                                               ww3_s5C5 ->
    case ww2_s5BZ
    of _ [Occ=Dead]
    { Options.Applicative.Builder.Internal.DefaultProp ww5_s5C2
                                                       ww6_s5C3 ->
    case Options.Applicative.Builder.$woption
           @ Int
           (Company.Executables.Options.Internal.Operations.intOption1
            `cast` (Sym
                      (transformers-0.4.2.0:Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                         <String>_R
                         <transformers-0.4.2.0:Control.Monad.Trans.Except.Except
                            O.ParseError>_R
                         <Int>_N)
                    ; Sym Options.Applicative.Types.NTCo:ReadM[0] <Int>_N
                    :: (String
                        -> transformers-0.4.2.0:Control.Monad.Trans.Except.Except
                             O.ParseError Int)
                       ~R# O.ReadM Int))
           ww1_s5BY
           ww5_s5C2
           ww6_s5C3
           ww3_s5C5
    of _ [Occ=Dead] { (# ww8_s5Cb, ww9_s5Cc #) ->
    Options.Applicative.Types.AltP @ Int ww8_s5Cb ww9_s5Cc
    }
    }
    }


